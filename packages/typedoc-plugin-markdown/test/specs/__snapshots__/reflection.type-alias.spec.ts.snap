// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Type Alias Reflection should compile array of objects type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: ArrayOfObjectsType

> **ArrayOfObjectsType** = \`object\`[]

Defined in: [types.ts:1](http://source-url)

## Type declaration

### age

> **age**: \`number\`

### name

> **name**: \`string\`

Comments for name
"
`;

exports[`Type Alias Reflection should compile array of objects type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: ArrayOfObjectsType

\`\`\`ts
type ArrayOfObjectsType = object[];
\`\`\`

Defined in: [types.ts:1](http://source-url)

## Type declaration

| Name | Type | Description |
| :------ | :------ | :------ |
| \`age\` | \`number\` | - |
| \`name\` | \`string\` | Comments for name |
"
`;

exports[`Type Alias Reflection should compile array type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: ArrayType

> **ArrayType** = \`string\`[]

Defined in: [types.ts:1](http://source-url)

Comments for ArrayType
"
`;

exports[`Type Alias Reflection should compile array type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: ArrayType

\`\`\`ts
type ArrayType = string[];
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for ArrayType
"
`;

exports[`Type Alias Reflection should compile conditional type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: ConditionalType\\<T\\>

> **ConditionalType**\\<\`T\`\\> = \`T\` *extends* \`string\` ? \`"string"\` : \`T\` *extends* \`number\` ? \`"number"\` : \`T\` *extends* \`boolean\` ? \`"boolean"\` : \`T\` *extends* \`undefined\` ? \`"undefined"\` : \`"object"\`

Defined in: [types.ts:1](http://source-url)

Comments for ConditionalType

## Type Parameters

### T

\`T\`
"
`;

exports[`Type Alias Reflection should compile conditional type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: ConditionalType\\<T\\>

\`\`\`ts
type ConditionalType<T> = T extends string ? "string" : T extends number ? "number" : T extends boolean ? "boolean" : T extends undefined ? "undefined" : "object";
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for ConditionalType

## Type Parameters

| Type Parameter |
| :------ |
| \`T\` |
"
`;

exports[`Type Alias Reflection should compile external link symbol type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: TypeWithExternalSymbolLinkMapping

> **TypeWithExternalSymbolLinkMapping** = [\`Application\`](https://typedoc.org/api/classes/Application.html)

Defined in: [types.ts:1](http://source-url)

Comments for TypeWithExternalSymbolLinkMapping
"
`;

exports[`Type Alias Reflection should compile external link symbol type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: TypeWithExternalSymbolLinkMapping

\`\`\`ts
type TypeWithExternalSymbolLinkMapping = Application;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for TypeWithExternalSymbolLinkMapping
"
`;

exports[`Type Alias Reflection should compile external literal type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: LiteralType

> **LiteralType** = \`object\`

Defined in: [types.ts:1](http://source-url)

Comments for LiteralType

## Properties

### someFunctionWithArrow()

> **someFunctionWithArrow**: () => \`string\`

Defined in: [types.ts:1](http://source-url)

Comments for someFunctionWithArrow

#### Returns

\`string\`

***

### x?

> \`optional\` **x**: \`string\`

Defined in: [types.ts:1](http://source-url)

comment for x

***

### y

> **y**: \`object\`

Defined in: [types.ts:1](http://source-url)

comment for y

#### x

> **x**: \`string\`

comment for y.x

#### y?

> \`optional\` **y**: \`boolean\` \\| \`string\`

comment for y.y

#### z()

> **z**: (\`x\`) => \`string\`

comment for y.z

##### Parameters

###### x

\`string\`

##### Returns

\`string\`

***

### z()

> **z**: (\`x\`) => \`string\`

Defined in: [types.ts:1](http://source-url)

#### Parameters

##### x

\`string\`

#### Returns

\`string\`

## Accessors

### accessorA

#### Get Signature

> **get** **accessorA**(): [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

Defined in: [types.ts:1](http://source-url)

Comments for accessorA getter

##### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

#### Set Signature

> **set** **accessorA**(\`x\`): \`void\`

Defined in: [types.ts:1](http://source-url)

Comments for accessorA setter

##### Parameters

###### x

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

##### Returns

\`void\`

***

### accessorB

#### Get Signature

> **get** **accessorB**(): \`string\`

Defined in: [types.ts:1](http://source-url)

##### Returns

\`string\`

#### Set Signature

> **set** **accessorB**(\`x\`): \`void\`

Defined in: [types.ts:1](http://source-url)

##### Parameters

###### x

\`string\`

##### Returns

\`void\`

## Methods

### someFunction()

> **someFunction**(\`param\`): [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\>

Defined in: [types.ts:1](http://source-url)

Comments for someFunction

#### Parameters

##### param

\`string\`

#### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\>
"
`;

exports[`Type Alias Reflection should compile external literal type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: LiteralType

\`\`\`ts
type LiteralType = object;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for LiteralType

## Properties

| Property | Type | Description |
| :------ | :------ | :------ |
| <a id="somefunctionwitharrow"></a> \`someFunctionWithArrow\` | () => \`string\` | Comments for someFunctionWithArrow |
| <a id="x"></a> \`x?\` | \`string\` | comment for x |
| <a id="y"></a> \`y\` | \`object\` | comment for y |
| \`y.x\` | \`string\` | comment for y.x |
| \`y.y?\` | \`boolean\` \\| \`string\` | comment for y.y |
| \`y.z\` | (\`x\`: \`string\`) => \`string\` | comment for y.z |
| <a id="z"></a> \`z\` | (\`x\`: \`string\`) => \`string\` | - |

## Accessors

### accessorA

#### Get Signature

\`\`\`ts
get accessorA(): Promise<string>;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for accessorA getter

##### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

#### Set Signature

\`\`\`ts
set accessorA(x: Promise<string>): void;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for accessorA setter

##### Parameters

| Parameter | Type |
| :------ | :------ |
| \`x\` | [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\> |

##### Returns

\`void\`

***

### accessorB

#### Get Signature

\`\`\`ts
get accessorB(): string;
\`\`\`

Defined in: [types.ts:1](http://source-url)

##### Returns

\`string\`

#### Set Signature

\`\`\`ts
set accessorB(x: string): void;
\`\`\`

Defined in: [types.ts:1](http://source-url)

##### Parameters

| Parameter | Type |
| :------ | :------ |
| \`x\` | \`string\` |

##### Returns

\`void\`

## Methods

### someFunction()

\`\`\`ts
someFunction(param: string): Promise<any>;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for someFunction

#### Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`param\` | \`string\` |  |

#### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\>
"
`;

exports[`Type Alias Reflection should compile external reference type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: ExternalReferenceType

> **ExternalReferenceType** = [\`ClassWithTypeParameters\`](../classes/ClassWithTypeParameters.md)\\<\`"x"\`, \`"y"\`\\>

Defined in: [types.ts:1](http://source-url)

Comments for ExternalReferenceType
"
`;

exports[`Type Alias Reflection should compile external reference type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: ExternalReferenceType

\`\`\`ts
type ExternalReferenceType = ClassWithTypeParameters<"x", "y">;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for ExternalReferenceType
"
`;

exports[`Type Alias Reflection should compile function type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: FunctionType()

> **FunctionType** = (\`name\`, \`value\`) => \`void\`

Defined in: [types.ts:1](http://source-url)

Comments for FunctionType

- Test link resolution for:

- [\`LiteralType\`](LiteralType.md) and uses [LiteralType#x](LiteralType.md#x)
- [\`BasicInterface\`](../interfaces/BasicInterface.md) and uses [BasicInterface#prop](../interfaces/BasicInterface.md#prop)
- [\`BasicClass\`](../classes/BasicClass.md) and uses [BasicClass#prop](../classes/BasicClass.md#prop)
- [\`BasicEnum\`](../enumerations/BasicEnum.md) and uses [BasicEnum#MemberA](../enumerations/BasicEnum.md#membera)

## Parameters

### name

\`string\`

### value

\`unknown\`

## Returns

\`void\`
"
`;

exports[`Type Alias Reflection should compile function type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: FunctionType()

\`\`\`ts
type FunctionType = (name: string, value: unknown) => void;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for FunctionType

- Test link resolution for:

- [\`LiteralType\`](LiteralType.md) and uses [LiteralType#x](LiteralType.md#x)
- [\`BasicInterface\`](../interfaces/BasicInterface.md) and uses [BasicInterface#prop](../interfaces/BasicInterface.md#prop)
- [\`BasicClass\`](../classes/BasicClass.md) and uses [BasicClass#prop](../classes/BasicClass.md#prop)
- [\`BasicEnum\`](../enumerations/BasicEnum.md) and uses [BasicEnum#MemberA](../enumerations/BasicEnum.md#membera)

## Parameters

| Parameter | Type |
| :------ | :------ |
| \`name\` | \`string\` |
| \`value\` | \`unknown\` |

## Returns

\`void\`
"
`;

exports[`Type Alias Reflection should compile index access type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: IndexAccessType

> **IndexAccessType** = [\`ArrayOfObjectsType\`](ArrayOfObjectsType.md)\\[\`number\`\\]

Defined in: [types.ts:1](http://source-url)

Comments for IndexAccessType
"
`;

exports[`Type Alias Reflection should compile index access type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: IndexAccessType

\`\`\`ts
type IndexAccessType = ArrayOfObjectsType[number];
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for IndexAccessType
"
`;

exports[`Type Alias Reflection should compile intersection type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: IntersectionType

> **IntersectionType** = [\`TupleType\`](TupleType.md) & [\`ArrayType\`](ArrayType.md) & \`object\`

Defined in: [types.ts:1](http://source-url)

Comments for IntersectionType

## Type declaration

### bar

> **bar**: \`number\`
"
`;

exports[`Type Alias Reflection should compile intersection type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: IntersectionType

\`\`\`ts
type IntersectionType = TupleType & ArrayType & object;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for IntersectionType

## Type declaration

| Name | Type |
| :------ | :------ |
| \`bar\` | \`number\` |
"
`;

exports[`Type Alias Reflection should compile partial mapped type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: PartialMappedType\\<T\\>

> **PartialMappedType**\\<\`T\`\\> = \`{ [P in keyof T]?: T[P] }\`

Defined in: [types.ts:1](http://source-url)

Comments for PartialMappedType

## Type Parameters

### T

\`T\`
"
`;

exports[`Type Alias Reflection should compile partial mapped type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: PartialMappedType\\<T\\>

\`\`\`ts
type PartialMappedType<T> = { [P in keyof T]?: T[P] };
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for PartialMappedType

## Type Parameters

| Type Parameter |
| :------ |
| \`T\` |
"
`;

exports[`Type Alias Reflection should compile primitive type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: PrimitiveType

> **PrimitiveType** = \`boolean\`

Defined in: [types.ts:1](http://source-url)

Comments for PrimitiveType
"
`;

exports[`Type Alias Reflection should compile primitive type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: PrimitiveType

\`\`\`ts
type PrimitiveType = boolean;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for PrimitiveType
"
`;

exports[`Type Alias Reflection should compile query type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: QueryType

> **QueryType** = *typeof* [\`someQuery\`](../variables/someQuery.md)

Defined in: [types.ts:1](http://source-url)

Comments for query type
"
`;

exports[`Type Alias Reflection should compile query type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: QueryType

\`\`\`ts
type QueryType = typeof someQuery;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for query type
"
`;

exports[`Type Alias Reflection should compile readonly mapped type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: ReadonlyMappedType\\<T\\>

> **ReadonlyMappedType**\\<\`T\`\\> = \`{ readonly [P in keyof T]: T[P] }\`

Defined in: [types.ts:1](http://source-url)

Comments for ReadonlyMapedType

## Type Parameters

### T

\`T\`
"
`;

exports[`Type Alias Reflection should compile readonly mapped type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: ReadonlyMappedType\\<T\\>

\`\`\`ts
type ReadonlyMappedType<T> = { readonly [P in keyof T]: T[P] };
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for ReadonlyMapedType

## Type Parameters

| Type Parameter |
| :------ |
| \`T\` |
"
`;

exports[`Type Alias Reflection should compile string literal type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: StringLiteralType

> **StringLiteralType** = \`" "\` \\| \`"string"\` \\| "string\\|with\\|pipes" \\| \`\` "string\`with\`backticks" \`\` \\| \`"<foo>"\` \\| \`"*"\`

Defined in: [types.ts:1](http://source-url)

Comments for StringLiteralType
"
`;

exports[`Type Alias Reflection should compile string literal type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: StringLiteralType

\`\`\`ts
type StringLiteralType = 
  | " "
  | "string"
  | "string|with|pipes"
  | "string\`with\`backticks"
  | "<foo>"
  | "*";
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for StringLiteralType
"
`;

exports[`Type Alias Reflection should compile string tuple type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: TupleType

> **TupleType** = \\[\`string\`, \`number\`\\]

Defined in: [types.ts:1](http://source-url)

Comments for TupleType
"
`;

exports[`Type Alias Reflection should compile string tuple type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: TupleType

\`\`\`ts
type TupleType = [string, number];
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for TupleType
"
`;

exports[`Type Alias Reflection should compile type parameter type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: TypeWithTypeParams\\<T, R\\>

> **TypeWithTypeParams**\\<\`T\`, \`R\`\\> = \\[\`T\`, \`R\`\\]

Defined in: [types.ts:1](http://source-url)

Comments for TypeWithTypeParams

## Type Parameters

### T

\`T\`

### R

\`R\`
"
`;

exports[`Type Alias Reflection should compile type parameter type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: TypeWithTypeParams\\<T, R\\>

\`\`\`ts
type TypeWithTypeParams<T, R> = [T, R];
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for TypeWithTypeParams

## Type Parameters

| Type Parameter |
| :------ |
| \`T\` |
| \`R\` |
"
`;

exports[`Type Alias Reflection should compile type with index signature: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: TypeWithIndexSignature

> **TypeWithIndexSignature** = \`object\`

Defined in: [types.ts:1](http://source-url)

Comments for TypeWithIndexSignature

## Index Signature

\\[\`key\`: \`string\`\\]: \`string\`

Comments for key

### Remarks

Some remarks
"
`;

exports[`Type Alias Reflection should compile type with index signature: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: TypeWithIndexSignature

\`\`\`ts
type TypeWithIndexSignature = object;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for TypeWithIndexSignature

## Index Signature

\`\`\`ts
[key: string]: string
\`\`\`

Comments for key

### Remarks

Some remarks
"
`;

exports[`Type Alias Reflection should compile type with returns: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: TypeWithReturns

> **TypeWithReturns** = \`string\`

Defined in: [types.ts:1](http://source-url)

Comments for TypeWithReturns

## Returns

- return comments.
"
`;

exports[`Type Alias Reflection should compile type with returns: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: TypeWithReturns

\`\`\`ts
type TypeWithReturns = string;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for TypeWithReturns

## Returns

- return comments.
"
`;

exports[`Type Alias Reflection should compile union type with template strings: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: UnionTypeWithTemplateStrings

> **UnionTypeWithTemplateStrings** = \`\` \`v\${number}\` \`\` \\| \`\` \`v\${number}.\${number}\` \`\` \\| \`\` \`v\${number}.\${number}.\${number}\` \`\`

Defined in: [types.ts:1](http://source-url)

Union with template strings
"
`;

exports[`Type Alias Reflection should compile union type with template strings: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: UnionTypeWithTemplateStrings

\`\`\`ts
type UnionTypeWithTemplateStrings = 
  | \`v\${number}\`
  | \`v\${number}.\${number}\`
  | \`v\${number}.\${number}.\${number}\`;
\`\`\`

Defined in: [types.ts:1](http://source-url)

Union with template strings
"
`;

exports[`Type Alias Reflection should compile union type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: UnionType

> **UnionType** = \`string\` \\| \`boolean\` \\| \\{ \`z\`: \`string\`; \\}

Defined in: [types.ts:1](http://source-url)

Comments for UnionType
"
`;

exports[`Type Alias Reflection should compile union type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: UnionType

\`\`\`ts
type UnionType = 
  | string
  | boolean
  | {
  z: string;
};
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for UnionType
"
`;

exports[`Type Alias Reflection should compile useful union type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: UsefulUnionType

> **UsefulUnionType** = \`string\` \\| \`boolean\` \\| \\{ \`z\`: \`string\`; \\}

Defined in: [types.ts:1](http://source-url)

Comments for useful UnionType

## Type declaration

\`string\`

\`boolean\`

\\{ \`z\`: \`string\`; \\}

### z

> **z**: \`string\`

Comments for z
"
`;

exports[`Type Alias Reflection should compile useful union type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: UsefulUnionType

\`\`\`ts
type UsefulUnionType = 
  | string
  | boolean
  | {
  z: string;
};
\`\`\`

Defined in: [types.ts:1](http://source-url)

Comments for useful UnionType

## Type declaration

\`string\`

\`boolean\`

\\{
  \`z\`: \`string\`;
\\}

| Name | Type | Description |
| :------ | :------ | :------ |
| \`z\` | \`string\` | Comments for z |
"
`;
