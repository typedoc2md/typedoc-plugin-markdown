// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Objects And Params should compile basic interface: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Interface: BasicInterface

Comments for BasicInterface

## Extended by

- [\`ExtendedInterface\`](ExtendedInterface.md)

## Properties

### ~~deprecatedProp~~

> **deprecatedProp**: \`string\`

#### Deprecated

This prop is deprecated

#### See

Comments for some tag

***

### functionProp()

> **functionProp**: (\`s\`: \`string\`) => \`boolean\`

Comments for functionProper

#### Parameters

##### s

\`string\`

Comment for param s

#### Returns

\`boolean\`

***

### optionalProp?

> \`optional\` **optionalProp**: \`string\`

Comments for optional prop

***

### prop

> **prop**: \`string\`

Comments for prop

***

### propReturningObjectDeclaration

> **propReturningObjectDeclaration**: \\{ \`a\`: \`boolean\`; \`b\`: \`string\`; \\}

Comments for propReturningObjectDeclaration

#### a

> **a**: \`boolean\`

#### b

> **b**: \`string\`

***

### propReturningObjectDeclarations

> **propReturningObjectDeclarations**: \\{ \`a\`: \`boolean\`; \`b\`: \`string\`; \\} & \\{ \`c\`: \`boolean\`; \`d\`: \`string\`; \\}

Comments for propReturningObjectDeclarations

#### Type declaration

##### a

> **a**: \`boolean\`

##### b

> **b**: \`string\`

#### Type declaration

##### c

> **c**: \`boolean\`

##### d

> **d**: \`string\`

***

### propReturningSignatureDeclaration()?

> \`optional\` **propReturningSignatureDeclaration**: () => \`string\` \\| \`number\` \\| \`boolean\`

Comments for propReturningSignatureDeclaration

#### Returns

\`string\` \\| \`number\` \\| \`boolean\`

***

### propReturningSignatureDeclarations

> **propReturningSignatureDeclarations**: () => \`any\` & (\`paramsA\`: \`true\` \\| \`any\`[], \`paramsB?\`: \`any\`) => \`any\` & (\`paramsC\`: \`any\`) => \`any\`

Comments for propReturningSignatureDeclarations

***

### propWithFunction()

> **propWithFunction**: (\`options\`: \\{ \`a\`: \`boolean\`; \`b\`: \`string\`; \\}) => \`boolean\`

Comments for propWithFunction

#### Parameters

##### options

###### a

\`boolean\`

###### b

\`string\`

#### Returns

\`boolean\`

***

### propWithProps

> **propWithProps**: \\{ \`callbacks\`: \`Partial\`\\<[\`CallbacksOptions\`](../classes/CallbacksOptions.md)\\<[\`DisposableClass\`](../classes/DisposableClass.md), [\`ClassWithModifiers\`](../classes/ClassWithModifiers.md)\\>\\>; \`nestedPropA\`: \`string\`; \`nestedPropB\`: \`boolean\`; \`nestedPropC\`: \\{ \`nestedPropCA\`: \`string\`; \\}; \`nestedPropD\`: () => \`boolean\`; \\}

Comments for propWithProps

#### callbacks?

> \`optional\` **callbacks**: \`Partial\`\\<[\`CallbacksOptions\`](../classes/CallbacksOptions.md)\\<[\`DisposableClass\`](../classes/DisposableClass.md), [\`ClassWithModifiers\`](../classes/ClassWithModifiers.md)\\>\\>

Comments for callbacks

#### nestedPropA

> **nestedPropA**: \`string\`

Comments for nestedPropA

#### nestedPropB

> **nestedPropB**: \`boolean\`

Comments for nestedPropB

#### nestedPropC

> **nestedPropC**: \\{ \`nestedPropCA\`: \`string\`; \\}

Comments for nestedPropC

##### nestedPropC.nestedPropCA

> **nestedPropCA**: \`string\`

Comments for nestedPropCA

#### nestedPropD()

> **nestedPropD**: () => \`boolean\`

Comments for nestedPropD

##### Returns

\`boolean\`
"
`;

exports[`Objects And Params should compile basic interface: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Interface: BasicInterface

Comments for BasicInterface

## Extended by

- [\`ExtendedInterface\`](ExtendedInterface.md)

## Properties

| Property | Type | Description |
| :------ | :------ | :------ |
| <a id="deprecatedprop"></a> ~~\`deprecatedProp\`~~ | \`string\` | **Deprecated** This prop is deprecated **See** Comments for some tag |
| <a id="functionprop"></a> \`functionProp\` | (\`s\`: \`string\`) => \`boolean\` | Comments for functionProper |
| <a id="optionalprop"></a> \`optionalProp?\` | \`string\` | Comments for optional prop |
| <a id="prop"></a> \`prop\` | \`string\` | Comments for prop |
| <a id="propreturningobjectdeclaration"></a> \`propReturningObjectDeclaration\` | \\{ \`a\`: \`boolean\`; \`b\`: \`string\`; \\} | Comments for propReturningObjectDeclaration |
| \`propReturningObjectDeclaration.a\` | \`boolean\` | - |
| \`propReturningObjectDeclaration.b\` | \`string\` | - |
| <a id="propreturningobjectdeclarations"></a> \`propReturningObjectDeclarations\` | \\{ \`a\`: \`boolean\`; \`b\`: \`string\`; \\} & \\{ \`c\`: \`boolean\`; \`d\`: \`string\`; \\} | Comments for propReturningObjectDeclarations |
| <a id="propreturningsignaturedeclaration"></a> \`propReturningSignatureDeclaration?\` | () => \`string\` \\| \`number\` \\| \`boolean\` | Comments for propReturningSignatureDeclaration |
| <a id="propreturningsignaturedeclarations"></a> \`propReturningSignatureDeclarations\` | () => \`any\` & (\`paramsA\`: \`true\` \\| \`any\`[], \`paramsB?\`: \`any\`) => \`any\` & (\`paramsC\`: \`any\`) => \`any\` | Comments for propReturningSignatureDeclarations |
| <a id="propwithfunction"></a> \`propWithFunction\` | (\`options\`: \\{ \`a\`: \`boolean\`; \`b\`: \`string\`; \\}) => \`boolean\` | Comments for propWithFunction |
| <a id="propwithprops"></a> \`propWithProps\` | \\{ \`callbacks\`: \`Partial\`\\<[\`CallbacksOptions\`](../classes/CallbacksOptions.md)\\<[\`DisposableClass\`](../classes/DisposableClass.md), [\`ClassWithModifiers\`](../classes/ClassWithModifiers.md)\\>\\>; \`nestedPropA\`: \`string\`; \`nestedPropB\`: \`boolean\`; \`nestedPropC\`: \\{ \`nestedPropCA\`: \`string\`; \\}; \`nestedPropD\`: () => \`boolean\`; \\} | Comments for propWithProps |
| \`propWithProps.callbacks?\` | \`Partial\`\\<[\`CallbacksOptions\`](../classes/CallbacksOptions.md)\\<[\`DisposableClass\`](../classes/DisposableClass.md), [\`ClassWithModifiers\`](../classes/ClassWithModifiers.md)\\>\\> | Comments for callbacks |
| \`propWithProps.nestedPropA\` | \`string\` | Comments for nestedPropA |
| \`propWithProps.nestedPropB\` | \`boolean\` | Comments for nestedPropB |
| \`propWithProps.nestedPropC\` | \\{ \`nestedPropCA\`: \`string\`; \\} | Comments for nestedPropC |
| \`propWithProps.nestedPropC.nestedPropCA\` | \`string\` | Comments for nestedPropCA |
| \`propWithProps.nestedPropD\` | () => \`boolean\` | Comments for nestedPropD |
"
`;

exports[`Objects And Params should compile function returning a promise: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: functionReturningAPromise()

> **functionReturningAPromise**(): [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\\{ \`prop\`: \`string\`; \\}\\>

Comments for function

## Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\\{ \`prop\`: \`string\`; \\}\\>

Return comments
"
`;

exports[`Objects And Params should compile function returning a promise: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Function: functionReturningAPromise()

\`\`\`ts
function functionReturningAPromise(): Promise<{
  prop: string;
}>;
\`\`\`

Comments for function

## Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\\{
  \`prop\`: \`string\`;
\\}\\>

Return comments
"
`;

exports[`Objects And Params should compile function returning a union: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: functionReturningAUnionType()

> **functionReturningAUnionType**(): \`string\` \\| \`boolean\`

Comments for function

## Returns

\`string\` \\| \`boolean\`

Return comments
"
`;

exports[`Objects And Params should compile function returning a union: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Function: functionReturningAUnionType()

\`\`\`ts
function functionReturningAUnionType(): string | boolean;
\`\`\`

Comments for function

## Returns

\`string\` \\| \`boolean\`

Return comments
"
`;

exports[`Objects And Params should compile function returning an object: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: functionReturningAnObject()

> **functionReturningAnObject**(): \\{ \`x\`: \`number\`; \`y\`: \`number\`; \\}

Comments for function

## Returns

\\{ \`x\`: \`number\`; \`y\`: \`number\`; \\}

Return comments

### x

> **x**: \`number\` = \`1\`

### y

> **y**: \`number\` = \`2\`
"
`;

exports[`Objects And Params should compile function returning an object: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Function: functionReturningAnObject()

\`\`\`ts
function functionReturningAnObject(): {
  x: number;
  y: number;
};
\`\`\`

Comments for function

## Returns

\`\`\`ts
{
  x: number;
  y: number;
}
\`\`\`

Return comments

### x

\`\`\`ts
x: number = 1;
\`\`\`

### y

\`\`\`ts
y: number = 2;
\`\`\`
"
`;

exports[`Objects And Params should compile function with nested parameters: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: functionWithNestedParameters()

> **functionWithNestedParameters**(\`params\`: \\{ \`name\`: \`string\`; \`nestedObj\`: \\{ \`name\`: \`string\`; \`obj\`: \\{ \`name\`: () => \`void\`; \\}; \`value\`: \`number\`; \\}; \`parent\`: \`number\`; \\}, \`context\`: \`any\`, \`somethingElse?\`: \`string\`): \`boolean\`

Some nested params.

## Parameters

### params

The parameters passed to the method.

#### name

\`string\`

The name of the new group.

#### nestedObj

\\{ \`name\`: \`string\`; \`obj\`: \\{ \`name\`: () => \`void\`; \\}; \`value\`: \`number\`; \\}

A nested object.

#### nestedObj.name

\`string\`

#### nestedObj.obj

\\{ \`name\`: () => \`void\`; \\}

#### nestedObj.obj.name

() => \`void\`

#### nestedObj.value

\`number\`

#### parent?

\`number\`

### context

\`any\`

The context of the method call.

### somethingElse?

\`string\`

## Returns

\`boolean\`
"
`;

exports[`Objects And Params should compile function with nested parameters: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Function: functionWithNestedParameters()

\`\`\`ts
function functionWithNestedParameters(
   params: {
  name: string;
  nestedObj: {
     name: string;
     obj: {
        name: () => void;
     };
     value: number;
  };
  parent: number;
}, 
   context: any, 
   somethingElse?: string): boolean;
\`\`\`

Some nested params.

## Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`params\` | \\{ \`name\`: \`string\`; \`nestedObj\`: \\{ \`name\`: \`string\`; \`obj\`: \\{ \`name\`: () => \`void\`; \\}; \`value\`: \`number\`; \\}; \`parent\`: \`number\`; \\} | The parameters passed to the method. |
| \`params.name\` | \`string\` | The name of the new group. |
| \`params.nestedObj\` | \\{ \`name\`: \`string\`; \`obj\`: \\{ \`name\`: () => \`void\`; \\}; \`value\`: \`number\`; \\} | A nested object. |
| \`params.nestedObj.name?\` | \`string\` | - |
| \`params.nestedObj.obj?\` | \\{ \`name\`: () => \`void\`; \\} | - |
| \`params.nestedObj.obj.name?\` | () => \`void\` | - |
| \`params.nestedObj.value?\` | \`number\` | - |
| \`params.parent?\` | \`number\` | - |
| \`context?\` | \`any\` | The context of the method call. |
| \`somethingElse?\` | \`string\` | - |

## Returns

\`boolean\`
"
`;

exports[`Objects And Params should compile intersection type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: IntersectionType

> **IntersectionType** = [\`TupleType\`](TupleType.md) & [\`ArrayType\`](ArrayType.md) & \\{ \`bar\`: \`number\`; \\}

Comments for IntersectionType

## Type declaration

### bar

> **bar**: \`number\`
"
`;

exports[`Objects And Params should compile intersection type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: IntersectionType

\`\`\`ts
type IntersectionType = TupleType & ArrayType & {
  bar: number;
};
\`\`\`

Comments for IntersectionType

## Type declaration

### bar

\`\`\`ts
bar: number;
\`\`\`
"
`;

exports[`Objects And Params should compile literal type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: LiteralType

> **LiteralType** = \\{ \`someFunctionWithArrow\`: () => \`string\`; \`x\`: \`string\`; \`y\`: \\{ \`x\`: \`string\`; \`y\`: \`boolean\` \\| \`string\`; \`z\`: (\`x\`: \`string\`) => \`string\`; \\}; \`z\`: (\`x\`: \`string\`) => \`string\`; get \`accessorA\`
  set \`accessorA\` \`accessorA\`: [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>; get \`accessorB\`
  set \`accessorB\` \`accessorB\`: \`string\`; \`someFunction\`: [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\>; \\}

Comments for LiteralType

## Properties

### someFunctionWithArrow()

> **someFunctionWithArrow**: () => \`string\`

Comments for someFunctionWithArrow

#### Returns

\`string\`

***

### x?

> \`optional\` **x**: \`string\`

comment for x

***

### y

> **y**: \\{ \`x\`: \`string\`; \`y\`: \`boolean\` \\| \`string\`; \`z\`: (\`x\`: \`string\`) => \`string\`; \\}

comment for y

#### x

> **x**: \`string\`

comment for y.x

#### y?

> \`optional\` **y**: \`boolean\` \\| \`string\`

comment for y.y

#### z()

> **z**: (\`x\`: \`string\`) => \`string\`

comment for y.z

##### Parameters

###### x

\`string\`

##### Returns

\`string\`

***

### z()

> **z**: (\`x\`: \`string\`) => \`string\`

#### Parameters

##### x

\`string\`

#### Returns

\`string\`

## Accessors

### accessorA

#### Get Signature

> **get** **accessorA**(): [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

Comments for accessorA getter

##### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

#### Set Signature

> **set** **accessorA**(\`x\`: [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>): \`void\`

Comments for accessorA setter

##### Parameters

###### x

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

##### Returns

\`void\`

***

### accessorB

#### Get Signature

> **get** **accessorB**(): \`string\`

##### Returns

\`string\`

#### Set Signature

> **set** **accessorB**(\`x\`: \`string\`): \`void\`

##### Parameters

###### x

\`string\`

##### Returns

\`void\`

## Methods

### someFunction()

> **someFunction**(\`param\`: \`string\`): [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\>

Comments for someFunction

#### Parameters

##### param

\`string\`

#### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\>
"
`;

exports[`Objects And Params should compile literal type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: LiteralType

\`\`\`ts
type LiteralType = {
  someFunctionWithArrow: () => string;
  x: string;
  y: {
     x: string;
     y: boolean | string;
     z: (x: string) => string;
  };
  z: (x: string) => string;
  get accessorA
  set accessorA accessorA: Promise<string>;
  get accessorB
  set accessorB accessorB: string;
  someFunction: Promise<any>;
};
\`\`\`

Comments for LiteralType

## Properties

### someFunctionWithArrow()

\`\`\`ts
someFunctionWithArrow: () => string;
\`\`\`

Comments for someFunctionWithArrow

#### Returns

\`string\`

***

### x?

\`\`\`ts
optional x: string;
\`\`\`

comment for x

***

### y

\`\`\`ts
y: {
  x: string;
  y: boolean | string;
  z: (x: string) => string;
};
\`\`\`

comment for y

#### x

\`\`\`ts
x: string;
\`\`\`

comment for y.x

#### y?

\`\`\`ts
optional y: boolean | string;
\`\`\`

comment for y.y

#### z()

\`\`\`ts
(x: string) => string
\`\`\`

comment for y.z

***

### z()

\`\`\`ts
z: (x: string) => string;
\`\`\`

#### Parameters

| Parameter | Type |
| :------ | :------ |
| \`x\` | \`string\` |

#### Returns

\`string\`

## Accessors

### accessorA

#### Get Signature

\`\`\`ts
get accessorA(): Promise<string>;
\`\`\`

Comments for accessorA getter

##### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

#### Set Signature

\`\`\`ts
set accessorA(x: Promise<string>): void;
\`\`\`

Comments for accessorA setter

##### Parameters

| Parameter | Type |
| :------ | :------ |
| \`x\` | [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\> |

##### Returns

\`void\`

***

### accessorB

#### Get Signature

\`\`\`ts
get accessorB(): string;
\`\`\`

##### Returns

\`string\`

#### Set Signature

\`\`\`ts
set accessorB(x: string): void;
\`\`\`

##### Parameters

| Parameter | Type |
| :------ | :------ |
| \`x\` | \`string\` |

##### Returns

\`void\`

## Methods

### someFunction()

\`\`\`ts
someFunction(param: string): Promise<any>;
\`\`\`

Comments for someFunction

#### Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`param\` | \`string\` |  |

#### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\>
"
`;

exports[`Objects And Params should compile object with symbol: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Variable: objectWithSymbol

> \`const\` **objectWithSymbol**: \\{ \`[sym]\`: \`string\`; \\}

Comments variable with symbol

## Type declaration

### \\[sym\\]

> **\\[sym\\]**: \`string\` = \`'value'\`

Comments for symbol
"
`;

exports[`Objects And Params should compile object with symbol: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Variable: objectWithSymbol

\`\`\`ts
const objectWithSymbol: {
  [sym]: string;
};
\`\`\`

Comments variable with symbol

## Type declaration

### \\[sym\\]

\`\`\`ts
[sym]: string = 'value';
\`\`\`

Comments for symbol
"
`;

exports[`Objects And Params should compile union type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: UnionType

> **UnionType** = \`string\` \\| \`boolean\` \\| \\{ \`z\`: \`string\`; \\}

Comments for UnionType
"
`;

exports[`Objects And Params should compile union type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: UnionType

\`\`\`ts
type UnionType = 
  | string
  | boolean
  | {
  z: string;
};
\`\`\`

Comments for UnionType
"
`;

exports[`Objects And Params should compile variable assigned to an object literal: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Variable: objectLiteralVariable

> \`const\` **objectLiteralVariable**: \\{ \`valueA\`: \`number\`; \`valueB\`: \`boolean\`; \`valueX\`: \\{ \`valueA\`: \`number\`[]; \`valueY\`: (\`z\`: \`string\`) => \\{ \`a\`: \`string\`; \`b\`: \`string\`; \`c\`: \\{ \`a\`: \`number\`; \`b\`: \`number\`; \\}; \\}; \`valueZ\`: \`string\`; \\}; \`valueY\`: (\`unionParam\`: \`"a"\` \\| \`"b"\`, \`_undercoreParam_\`: \`string\`) => \`string\`; \`valueZ\`: \`string\`; \\}

Comments for objectLiteralVariable

## See

xyz.com

## Type declaration

### valueA

> **valueA**: \`number\` = \`100\`

Comments for valueA

### valueB

> **valueB**: \`boolean\` = \`true\`

### valueX

> **valueX**: \\{ \`valueA\`: \`number\`[]; \`valueY\`: (\`z\`: \`string\`) => \\{ \`a\`: \`string\`; \`b\`: \`string\`; \`c\`: \\{ \`a\`: \`number\`; \`b\`: \`number\`; \\}; \\}; \`valueZ\`: \`string\`; \\}

Comments for valueX

#### valueX.valueA

> **valueA**: \`number\`[]

Comment for valueX.valueA

#### valueX.valueY()

> **valueY**: (\`z\`: \`string\`) => \\{ \`a\`: \`string\`; \`b\`: \`string\`; \`c\`: \\{ \`a\`: \`number\`; \`b\`: \`number\`; \\}; \\}

Comments for valueX.valueY

##### Parameters

###### z

\`string\`

##### Returns

\\{ \`a\`: \`string\`; \`b\`: \`string\`; \`c\`: \\{ \`a\`: \`number\`; \`b\`: \`number\`; \\}; \\}

###### a

> **a**: \`string\` = \`'test'\`

###### b

> **b**: \`string\` = \`z\`

###### c

> **c**: \\{ \`a\`: \`number\`; \`b\`: \`number\`; \\}

###### c.a

> **a**: \`number\` = \`1\`

###### c.b

> **b**: \`number\` = \`2\`

#### valueX.valueZ

> **valueZ**: \`string\` = \`'foo'\`

### valueY()

> **valueY**: (\`unionParam\`: \`"a"\` \\| \`"b"\`, \`_undercoreParam_\`: \`string\`) => \`string\`

Comments for valueY

comments for valueY function

#### Parameters

##### unionParam

\`"a"\` | \`"b"\`

##### \\_undercoreParam\\_

\`string\`

#### Returns

\`string\`

### valueZ()

> **valueZ**(\`param\`: \`string\`): \`string\`

Comments for valueZ

#### Parameters

##### param

\`string\`

#### Returns

\`string\`
"
`;

exports[`Objects And Params should compile variable assigned to an object literal: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Variable: objectLiteralVariable

\`\`\`ts
const objectLiteralVariable: {
  valueA: number;
  valueB: boolean;
  valueX: {
     valueA: number[];
     valueY: (z: string) => {
        a: string;
        b: string;
        c: {
           a: number;
           b: number;
        };
     };
     valueZ: string;
  };
  valueY: (unionParam: "a" | "b", _undercoreParam_: string) => string;
  valueZ: string;
};
\`\`\`

Comments for objectLiteralVariable

## See

xyz.com

## Type declaration

### valueA

\`\`\`ts
valueA: number = 100;
\`\`\`

Comments for valueA

### valueB

\`\`\`ts
valueB: boolean = true;
\`\`\`

### valueX

\`\`\`ts
{
  valueA: number[];
  valueY: (z: string) => {
     a: string;
     b: string;
     c: {
        a: number;
        b: number;
     };
  };
  valueZ: string;
}
\`\`\`

Comments for valueX

### valueY()

\`\`\`ts
(unionParam: "a" | "b", _undercoreParam_: string) => string
\`\`\`

Comments for valueY

### valueZ()

\`\`\`ts
valueZ(param: string): string;
\`\`\`

Comments for valueZ

#### Parameters

| Parameter | Type |
| :------ | :------ |
| \`param\` | \`string\` |

#### Returns

\`string\`
"
`;
