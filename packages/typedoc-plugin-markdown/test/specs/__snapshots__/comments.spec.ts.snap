// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Comments should compile @links with anchors: (Output File Strategy "modules") (Option Group "1") 1`] = `
"- [CommentInterface](README.md#commentinterface) - Links to CommentInterface
- [Links to CommentInterface.prop](README.md#prop)
- [\`Links to CommentInterface.propb\`](README.md#propb-3)
- [Links to CommentInterface.\\_prop\\_with\\_underscore\\_](README.md#_prop_with_underscore_)
- [CommentEnum.MemberB](README.md#memberb)
- [SameName.prop](README.md#prop-2)
- [TypeWithGenerics](README.md#typewithgenericsc-d)
- [TypeDeclarationType](README.md#typedeclarationtype)
- [TypeDeclarationType#declaration1](README.md#declaration1)
- [TypeDeclarationType2#declaration1](README.md#declaration1-1)"
`;

exports[`Comments should compile comments for module: (Output File Strategy "members") (Option Group "1") 1`] = `
"# typedoc-stubs

Comments form module comments

> links

Links using \`{@link}\` inline tags.

- [CommentInterface](interfaces/CommentInterface.md) - Links to CommentInterface
- [Links to CommentInterface.prop](interfaces/CommentInterface.md#prop)
- [\`Links to CommentInterface.propb\`](interfaces/CommentInterface.md#propb)
- [Links to CommentInterface.\\_prop\\_with\\_underscore\\_](interfaces/CommentInterface.md#_prop_with_underscore_)
- [CommentEnum.MemberB](enumerations/CommentEnum.md#memberb)
- [SameName.prop](interfaces/SameName.md#prop)
- [TypeWithGenerics](type-aliases/TypeWithGenerics.md)
- [TypeDeclarationType](type-aliases/TypeDeclarationType.md)
- [TypeDeclarationType#declaration1](type-aliases/TypeDeclarationType.md#declaration1)
- [TypeDeclarationType2#declaration1](type-aliases/TypeDeclarationType2.md#declaration1)

External links:

- [Google](https://www.google.com)
- [\`https://www.google.com\`](https://www.google.com)

Relative Links:

- [Relative Document](_media/PROJECT_DOC_1.md)
- [Relative Document With Anchor](_media/PROJECT_DOC_1.md#anchor)

Relative Image Links:

<img src="_media/logo.png" alt="Logo" />

![Logo](_media/logo.svg)

## See

 - Comments for a tag
 - Comments for tag written on same line

## Html And Jsx

A <tag></tag> in comments

A \`<tag>\` in backticks

Another object \`{ x: 1 }\`.

<div style={{backgroundColor: "#fff", padding: 16}}>
 <img style={{display: "block"}} height="48" width="48"/>
</div>

Some random {{braces}}.

\`\`\`
A <tag> in a code block
Some <p> html </p> inside codeblock
\`\`\`

> codeBlocks

\`\`\`css
.class {color:red}
\`\`\`

\`\`\`html
<div>x</div> <tag>y</tag>
\`\`\`

\`single line <code> {block}\`

## Enumerations

- [CommentEnum](enumerations/CommentEnum.md)
- [EnumMembersTable](enumerations/EnumMembersTable.md)

## Classes

- [BaseClassProperties](classes/BaseClassProperties.md)
- [ClassPropertiesTable](classes/ClassPropertiesTable.md)

## Interfaces

- [BaseInterfaceProperties](interfaces/BaseInterfaceProperties.md)
- [CommentInterface](interfaces/CommentInterface.md)
- [CommentInterfaceExtended](interfaces/CommentInterfaceExtended.md)
- [InterfacePropertiesTable](interfaces/InterfacePropertiesTable.md)
- [SameName](interfaces/SameName.md)

## Type Aliases

- [TypeDeclarationType](type-aliases/TypeDeclarationType.md)
- [TypeDeclarationType2](type-aliases/TypeDeclarationType2.md)
- [typeWithBlockTags](type-aliases/typeWithBlockTags.md)
- [TypeWithGenerics](type-aliases/TypeWithGenerics.md)

## Variables

- [\\_prop\\_with\\_underscore](variables/prop_with_underscore.md)
- [prop](variables/prop.md)
- [propb](variables/propb.md)
- [SameName](variables/SameName.md)
- [TypeDeclarationConst](variables/TypeDeclarationConst.md)

## Functions

- [constFunction](functions/constFunction.md)
- [constFunctionWithReturns](functions/constFunctionWithReturns.md)
- [functionWithBlockTags](functions/functionWithBlockTags.md)
- [multipleExampleTags](functions/multipleExampleTags.md)
- [parametersTable](functions/parametersTable.md)
- [singleExampleTag](functions/singleExampleTag.md)
"
`;

exports[`Comments should get function with block tags: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: functionWithBlockTags()

> **functionWithBlockTags**(\`x\`, \`y\`): \`void\`

Defined in: [index.ts:1](http://source-url)

Function with block tags summary

## Parameters

| Parameter | Type |
| ------ | ------ |
| \`x\` | \`string\` |
| \`y\` | \`string\` |

## Returns

\`void\`

## Example

\`\`\`ts
const x = 1;
\`\`\`

## See

abc.com

## Remarks

Other block tags
"
`;

exports[`Comments should get function with block tags: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Function: functionWithBlockTags()

> **functionWithBlockTags**(\`x\`, \`y\`): \`void\`

Defined in: [index.ts:1](http://source-url)

Function with block tags summary

## Example

\`\`\`ts
const x = 1;
\`\`\`

## Parameters

<table>
<thead>
<tr>
<th align="left">Parameter</th>
<th align="left">Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>

\`x\`

</td>
<td>

\`string\`

</td>
</tr>
<tr>
<td>

\`y\`

</td>
<td>

\`string\`

</td>
</tr>
</tbody>
</table>

## Returns

\`void\`

## See

abc.com

## Remarks

Other block tags
"
`;

exports[`Comments should get tables for enum: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Enumeration: EnumMembersTable

Defined in: [index.ts:1](http://source-url)

## Enumeration Members

| Enumeration Member | Value | Description | Defined in |
| ------ | ------ | ------ | ------ |
| <a id="member1"></a> \`member1\` | \`"member1"\` | The subroutine recursively parsed the hexadecimal data. | [index.ts:1](http://source-url) |
"
`;

exports[`Comments should get tables for enum: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Enumeration: EnumMembersTable

Defined in: [index.ts:1](http://source-url)

## Enumeration Members

<table>
<thead>
<tr>
<th align="left">Enumeration Member</th>
<th align="left">Value</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>

<a id="member1"></a> \`member1\`

</td>
<td>

\`"member1"\`

</td>
<td>

The subroutine recursively parsed the hexadecimal data.

</td>
</tr>
</tbody>
</table>
"
`;

exports[`Comments should get tables for parameters: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: parametersTable()

> **parametersTable**\\<\`T\`\\>(\`param1\`, \`param2\`, \`param3\`): \`number\`

Defined in: [index.ts:1](http://source-url)

Adds two numbers together.

## Type Parameters

| Type Parameter | Default type | Description |
| ------ | ------ | ------ |
| \`T\` | \`string\` | The type of the numbers to be added. |

## Parameters

| Parameter | Type | Default value | Description |
| ------ | ------ | ------ | ------ |
| \`param1\` | \`number\` | \`undefined\` | The first param to be added. |
| \`param2\` | \`number\` | \`undefined\` | The second param to be added. Some additional text for num2. |
| \`param3\` | \`number\` | \`4\` | The third param to be added. |

## Returns

\`number\`
"
`;

exports[`Comments should get tables for properties: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassPropertiesTable

Defined in: [index.ts:1](http://source-url)

## Extends

- [\`BaseClassProperties\`](BaseClassProperties.md)

## Constructors

<a id="constructors"></a>

### new ClassPropertiesTable()

> **new ClassPropertiesTable**(): [\`ClassPropertiesTable\`](ClassPropertiesTable.md)

#### Returns

[\`ClassPropertiesTable\`](ClassPropertiesTable.md)

#### Inherited from

[\`BaseClassProperties\`](BaseClassProperties.md).[\`constructor\`](BaseClassProperties.md#constructors)

## Properties

| Property | Modifier | Type | Default value | Description | Overrides | Inherited from | Defined in |
| ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ |
| <a id="prop1"></a> \`prop1\` | \`private\` | \`boolean\` | \`undefined\` | The subroutine recursively parsed the hexadecimal data. to generate the binary output for input validation. | - | - | [index.ts:1](http://source-url) |
| <a id="prop2"></a> \`prop2\` | \`readonly\` | \`RegExp\` | \`undefined\` | Below is a breakdown of the notable performances: - The CPU executed the instruction set in parallel with the GPU computations. - The RAM efficiently cached the frequently accessed data for faster retrieval. - The SSD accessed the stored files with lightning speed due to its high read/write capabilities. | - | - | [index.ts:1](http://source-url) |
| <a id="prop3"></a> \`prop3?\` | \`public\` | \`string\` | \`undefined\` | > Example of Triple Code Block \`def greet(name): print("Hello, " + name + "!")\` | - | - | [index.ts:1](http://source-url) |
| <a id="propa"></a> ~~\`propA\`~~ | \`public\` | \`string\` | \`'propAValue'\` | **Deprecated** | [\`BaseClassProperties\`](BaseClassProperties.md).[\`propA\`](BaseClassProperties.md#propa) | - | [index.ts:1](http://source-url) |
| <a id="propb"></a> \`propB\` | \`public\` | \`string\` | \`undefined\` | - | - | [\`BaseClassProperties\`](BaseClassProperties.md).[\`propB\`](BaseClassProperties.md#propb) | [index.ts:1](http://source-url) |
| <a id="propwithflag"></a> \`propWithFlag\` | \`public\` | \`string\` | \`undefined\` | **\`Experimental\`** Experimental flag comments | - | - | [index.ts:1](http://source-url) |
"
`;

exports[`Comments should get tables for properties: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: ClassPropertiesTable

Defined in: [index.ts:1](http://source-url)

## Extends

- [\`BaseClassProperties\`](https://example.com/Class.BaseClassProperties.md)

## Constructors

<a id="constructors"></a>

### new ClassPropertiesTable()

> **new ClassPropertiesTable**(): [\`ClassPropertiesTable\`](https://example.com/Class.ClassPropertiesTable.md)

#### Returns

[\`ClassPropertiesTable\`](https://example.com/Class.ClassPropertiesTable.md)

#### Inherited from

[\`BaseClassProperties\`](https://example.com/Class.BaseClassProperties.md).[\`constructor\`](https://example.com/Class.BaseClassProperties.md#constructors)

## Properties

<table>
<thead>
<tr>
<th align="left">Property</th>
<th align="left">Type</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>

<a id="prop1"></a> \`prop1\`

</td>
<td>

\`boolean\`

</td>
<td>

The subroutine recursively parsed the hexadecimal data.
to generate the binary output for input validation.

</td>
</tr>
<tr>
<td>

<a id="prop2"></a> \`prop2\`

</td>
<td>

\`RegExp\`

</td>
<td>

Below is a breakdown of the notable performances:

- The CPU executed the instruction set in parallel with the GPU computations.
- The RAM efficiently cached the frequently accessed data for faster retrieval.
- The SSD accessed the stored files with lightning speed due to its high read/write capabilities.

</td>
</tr>
<tr>
<td>

<a id="prop3"></a> \`prop3?\`

</td>
<td>

\`string\`

</td>
<td>

> Example of Triple Code Block

\`\`\`ts
def greet(name):
print("Hello, " + name + "!")
\`\`\`

</td>
</tr>
<tr>
<td>

<a id="propA"></a> ~~\`propA\`~~

</td>
<td>

\`string\`

</td>
<td>

**Deprecated**

</td>
</tr>
<tr>
<td>

<a id="propB"></a> \`propB\`

</td>
<td>

\`string\`

</td>
<td>

&hyphen;

</td>
</tr>
<tr>
<td>

<a id="propWithFlag"></a> \`propWithFlag\`

</td>
<td>

\`string\`

</td>
<td>

**\`Experimental\`**

Experimental flag comments

</td>
</tr>
</tbody>
</table>
"
`;

exports[`Comments should get tables for type declarations: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: TypeDeclarationType

> **TypeDeclarationType**: \`object\`

Defined in: [index.ts:1](http://source-url)

## Type declaration

| Name | Type | Description | Defined in |
| ------ | ------ | ------ | ------ |
| <a id="declaration1"></a> \`declaration1\` | \`boolean\` | Comments for declaration1 | [index.ts:1](http://source-url) |
| <a id="declaration2"></a> \`declaration2\` | \`boolean\` | Comments for declaration2 | [index.ts:1](http://source-url) |
| <a id="declaration3"></a> \`declaration3\` | \`100\` | - | [index.ts:1](http://source-url) |
"
`;

exports[`Comments should get tables for type declarations: (Output File Strategy "members") (Option Group "1") 2`] = `
"# Variable: TypeDeclarationConst

> \`const\` **TypeDeclarationConst**: \`object\`

Defined in: [index.ts:1](http://source-url)

## Type declaration

| Name | Type | Default value | Defined in |
| ------ | ------ | ------ | ------ |
| <a id="declaration1"></a> \`declaration1\` | \`string\` | 'declaration3' | [index.ts:1](http://source-url) |
| <a id="declaration2"></a> \`declaration2\` | \`number\` | 100 | [index.ts:1](http://source-url) |
"
`;

exports[`Comments should get tables for type declarations: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: TypeDeclarationType

> **TypeDeclarationType**: \\{ \`declaration1\`: \`boolean\`; \`declaration2\`: \`boolean\`; \`declaration3\`: \`100\`; \\}

Defined in: [index.ts:1](http://source-url)

## Type declaration

<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Type</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>

<a id="declaration1"></a> \`declaration1\`

</td>
<td>

\`boolean\`

</td>
<td>

Comments for declaration1

</td>
</tr>
<tr>
<td>

<a id="declaration2"></a> \`declaration2\`

</td>
<td>

\`boolean\`

</td>
<td>

Comments for declaration2

</td>
</tr>
<tr>
<td>

<a id="declaration3"></a> \`declaration3\`

</td>
<td>

\`100\`

</td>
<td>

&hyphen;

</td>
</tr>
</tbody>
</table>
"
`;

exports[`Comments should get tables for type declarations: (Output File Strategy "members") (Option Group "2") 2`] = `
"# Variable: TypeDeclarationConst

> \`const\` **TypeDeclarationConst**: \\{ \`declaration1\`: \`string\`; \`declaration2\`: \`number\`; \\}

Defined in: [index.ts:1](http://source-url)

## Type declaration

<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Type</th>
<th align="left">Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>

<a id="declaration1"></a> \`declaration1\`

</td>
<td>

\`string\`

</td>
<td>

'declaration3'

</td>
</tr>
<tr>
<td>

<a id="declaration2"></a> \`declaration2\`

</td>
<td>

\`number\`

</td>
<td>

100

</td>
</tr>
</tbody>
</table>
"
`;

exports[`Comments should get variable with block tags: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: typeWithBlockTags

> **typeWithBlockTags**: \`object\`

Defined in: [index.ts:1](http://source-url)

Variable with block tags summary

## Type declaration

| Name | Type | Defined in |
| ------ | ------ | ------ |
| <a id="x"></a> \`x\` | \`string\` | [index.ts:1](http://source-url) |

## Example

\`\`\`ts
const x = 1;
\`\`\`

## Remarks

Other block tags
"
`;

exports[`Comments should get variable with block tags: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: typeWithBlockTags

> **typeWithBlockTags**: \\{ \`x\`: \`string\`; \\}

Defined in: [index.ts:1](http://source-url)

Variable with block tags summary

## Example

\`\`\`ts
const x = 1;
\`\`\`

## Type declaration

<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>

<a id="x"></a> \`x\`

</td>
<td>

\`string\`

</td>
</tr>
</tbody>
</table>

## Remarks

Other block tags
"
`;

exports[`Comments should handle const function with returns: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: constFunctionWithReturns()

> **constFunctionWithReturns**(\`text\`): \`boolean\`

Defined in: [index.ts:1](http://source-url)

constFunctionWithReturns comments

## Parameters

| Parameter | Type | Description |
| ------ | ------ | ------ |
| \`text\` | \`string\` | Some param |

## Returns

\`boolean\`

Return comments

## Remarks

Some remarks
"
`;

exports[`Comments should handle const function: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: constFunction()

> **constFunction**(\`text\`): \`boolean\`

Defined in: [index.ts:1](http://source-url)

constFunction comments

## Parameters

| Parameter | Type | Description |
| ------ | ------ | ------ |
| \`text\` | \`string\` | Some param |

## Returns

\`boolean\`

## Remarks

Some remarks
"
`;

exports[`Comments should handle multiple example tags: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: multipleExampleTags()

> **multipleExampleTags**(): \`boolean\`

Defined in: [index.ts:1](http://source-url)

Function with multiple example tags

## Returns

\`boolean\`

## Examples

\`\`\`ts
// If there are no code blocks, TypeDoc assumes the whole tag
// should be a code block. This is not valid TSDoc, but is recognized
// by VSCode and enables better JSDoc support.

factorial(1)
\`\`\`

If there is a code block, then both TypeDoc and VSCode will treat
text outside of the code block as regular text.

\`\`\`ts
factorial(1)
\`\`\`
"
`;

exports[`Comments should handle single example tags: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: singleExampleTag()

> **singleExampleTag**(): \`boolean\`

Defined in: [index.ts:1](http://source-url)

Function with single example tag

## Returns

\`boolean\`

Return comments

## Example

If there is a code block, then both TypeDoc and VSCode will treat
text outside of the code block as regular text.

\`\`\`ts
factorial(1)
\`\`\`
"
`;
